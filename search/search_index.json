{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Headers for Human \ud83d\udc4b Imagine you could combine advantages of many representations ! With auto-completion ! \ud83d\udd2a Features kiss-headers is a library on steroid that allow you to handle with great care headers. A backward compatible syntax using bracket style. Capable to alter headers using simple operator notation + and - like a human would do. Does not care if headers are from IMAP4 or HTTP, do as you need with one library. Ability to parse any object and extract from it recognized headers. Fully type annotated. Provide great auto-completion in python interpreter or any capable IDE. 90% test coverage. Plus all the features that you would expect from handling headers... Properties syntax for headers and attribute in header. Support headers and attributes OneToOne and OneToMany. Capable of parsing bytes , fp , str , dict and requests.Response . Automatically unquote value of an attribute when retrieving it. Case insensible on header name and attribute key. Character - equal _ in addition of above feature. \u2728 Installation Whatever you like, use Pipenv or pip , it simply work. We are expecting you to have python 3.6+ installed. pip install kiss-headers \ud83d\udcdd License Copyright \u00a9 2020 Ahmed TAHRI @Ousret . This project is MIT licensed.","title":"Introduction"},{"location":"#features","text":"kiss-headers is a library on steroid that allow you to handle with great care headers. A backward compatible syntax using bracket style. Capable to alter headers using simple operator notation + and - like a human would do. Does not care if headers are from IMAP4 or HTTP, do as you need with one library. Ability to parse any object and extract from it recognized headers. Fully type annotated. Provide great auto-completion in python interpreter or any capable IDE. 90% test coverage. Plus all the features that you would expect from handling headers... Properties syntax for headers and attribute in header. Support headers and attributes OneToOne and OneToMany. Capable of parsing bytes , fp , str , dict and requests.Response . Automatically unquote value of an attribute when retrieving it. Case insensible on header name and attribute key. Character - equal _ in addition of above feature.","title":"\ud83d\udd2a Features"},{"location":"#installation","text":"Whatever you like, use Pipenv or pip , it simply work. We are expecting you to have python 3.6+ installed. pip install kiss-headers","title":"\u2728 Installation"},{"location":"#license","text":"Copyright \u00a9 2020 Ahmed TAHRI @Ousret . This project is MIT licensed.","title":"\ud83d\udcdd License"},{"location":"advanced-header/","text":"Setup Consider this : from kiss_headers import parse_it from requests import get headers = parse_it ( get ( 'https://www.python.org' )) Existence of an attribute in header Choose any flavour you like when checking for an attribute like charset=utf-8 . 'charset' in headers . content_type # OR hasattr ( headers . content_type , 'charset' ) # OR headers . content_type . has ( 'charset' ) Accessing an attribute headers . content_type . charset # OR headers . content_type [ 'charset' ] # OR headers . content_type . get ( 'charset' ) Remove attribute If attribute exist multiple time, it would remove all entries. del headers . content_type . charset # OR del headers . content_type [ 'charset' ] Create attribute on the fly headers . content_type . charset = 'utf-8' # OR headers . content_type [ 'charset' ] = 'utf-8'","title":"Header"},{"location":"advanced-header/#setup","text":"Consider this : from kiss_headers import parse_it from requests import get headers = parse_it ( get ( 'https://www.python.org' ))","title":"Setup"},{"location":"advanced-header/#existence-of-an-attribute-in-header","text":"Choose any flavour you like when checking for an attribute like charset=utf-8 . 'charset' in headers . content_type # OR hasattr ( headers . content_type , 'charset' ) # OR headers . content_type . has ( 'charset' )","title":"Existence of an attribute in header"},{"location":"advanced-header/#accessing-an-attribute","text":"headers . content_type . charset # OR headers . content_type [ 'charset' ] # OR headers . content_type . get ( 'charset' )","title":"Accessing an attribute"},{"location":"advanced-header/#remove-attribute","text":"If attribute exist multiple time, it would remove all entries. del headers . content_type . charset # OR del headers . content_type [ 'charset' ]","title":"Remove attribute"},{"location":"advanced-header/#create-attribute-on-the-fly","text":"headers . content_type . charset = 'utf-8' # OR headers . content_type [ 'charset' ] = 'utf-8'","title":"Create attribute on the fly"},{"location":"advanced-headers/","text":"Setup Consider this : from kiss_headers import parse_it from requests import get headers = parse_it ( get ( 'https://www.python.org' )) Test existence of an header 'Content-Type' in headers # OR 'Content-Type' in headers . keys () # OR hasattr ( headers , 'content-type' ) # OR headers . has ( 'content-type' ) Accessing it headers . content_type # OR headers [ 'content-type' ] # OR headers . get ( 'content-type' ) Removing It is possible to remove an header using multiple way. eg. If you would like to remove Content-Type header. Using del del headers [ 'Content-Type' ] # OR del headers . content_type Using native subtract headers -= 'Content-Type' # OR headers = headers - 'Content-Type' Adding It is possible to add an header using multiple way. eg. If you would like to add Content-Type header. You will have to import like bellow Header class in addition of parse_it . from kiss_headers import Header Using native addition headers += Header ( 'Content-Type' , 'application/json' ) Using assignation headers [ 'content-type' ] = 'application/json' # OR headers . content_type = 'application/json' Compare content Consider this : Content-Type content is application/json; charset=utf-8 . The following would result in a True statement. headers . content_type == 'application/json' 'application/json' in headers . content_type 'charset' in headers . content_type The following would result in a False statement. headers . content_type == 'application' 'application' in headers . content_type Cast to dict You could use to_dict() method to obtain a CaseInsensibleDict from a Headers object. Any headers that are OneToMany will be concatenated into one entry, separated with a comma.","title":"Headers"},{"location":"advanced-headers/#setup","text":"Consider this : from kiss_headers import parse_it from requests import get headers = parse_it ( get ( 'https://www.python.org' ))","title":"Setup"},{"location":"advanced-headers/#test-existence-of-an-header","text":"'Content-Type' in headers # OR 'Content-Type' in headers . keys () # OR hasattr ( headers , 'content-type' ) # OR headers . has ( 'content-type' )","title":"Test existence of an header"},{"location":"advanced-headers/#accessing-it","text":"headers . content_type # OR headers [ 'content-type' ] # OR headers . get ( 'content-type' )","title":"Accessing it"},{"location":"advanced-headers/#removing","text":"It is possible to remove an header using multiple way. eg. If you would like to remove Content-Type header.","title":"Removing"},{"location":"advanced-headers/#using-del","text":"del headers [ 'Content-Type' ] # OR del headers . content_type","title":"Using del"},{"location":"advanced-headers/#using-native-subtract","text":"headers -= 'Content-Type' # OR headers = headers - 'Content-Type'","title":"Using native subtract"},{"location":"advanced-headers/#adding","text":"It is possible to add an header using multiple way. eg. If you would like to add Content-Type header. You will have to import like bellow Header class in addition of parse_it . from kiss_headers import Header","title":"Adding"},{"location":"advanced-headers/#using-native-addition","text":"headers += Header ( 'Content-Type' , 'application/json' )","title":"Using native addition"},{"location":"advanced-headers/#using-assignation","text":"headers [ 'content-type' ] = 'application/json' # OR headers . content_type = 'application/json'","title":"Using assignation"},{"location":"advanced-headers/#compare-content","text":"Consider this : Content-Type content is application/json; charset=utf-8 . The following would result in a True statement. headers . content_type == 'application/json' 'application/json' in headers . content_type 'charset' in headers . content_type The following would result in a False statement. headers . content_type == 'application' 'application' in headers . content_type","title":"Compare content"},{"location":"advanced-headers/#cast-to-dict","text":"You could use to_dict() method to obtain a CaseInsensibleDict from a Headers object. Any headers that are OneToMany will be concatenated into one entry, separated with a comma.","title":"Cast to dict"},{"location":"contributing/","text":"Contribution Guidelines If you\u2019re reading this, you\u2019re probably interested in contributing to kiss-headers . Thank you very much! Open source projects live-and-die based on the support they receive from others, and the fact that you\u2019re even considering contributing to this project is very generous of you. Questions The GitHub issue tracker is for bug reports and feature requests . Questions are allowed only when no answer are provided in docs. Good Bug Reports Please be aware of the following things when filing bug reports: Avoid raising duplicate issues. Please use the GitHub issue search feature to check whether your bug report or feature request has been mentioned in the past. Duplicate bug reports and feature requests are a huge maintenance burden on the limited resources of the project. If it is clear from your report that you would have struggled to find the original, that's ok, but if searching for a selection of words in your issue title would have found the duplicate then the issue will likely be closed extremely abruptly. When filing bug reports about exceptions or tracebacks, please include the complete traceback. Partial tracebacks, or just the exception text, are not helpful. Issues that do not contain complete tracebacks may be closed without warning. Make sure you provide a suitable amount of information to work with. This means you should provide: Guidance on how to reproduce the issue . Ideally, this should be a small code sample that can be run immediately by the maintainers. Failing that, let us know what you're doing, how often it happens, what environment you're using, etc. Be thorough: it prevents us needing to ask further questions. Tell us what you expected to happen . When we run your example code, what are we expecting to happen? What does \"success\" look like for your code? Tell us what actually happens . It's not helpful for you to say \"it doesn't work\" or \"it fails\". Tell us how it fails: do you get an exception? A None answer? How was the actual result different from your expected result? Tell us what version of kiss-headers you're using , and how you installed it . Different versions of kiss-headers behave differently and have different bugs. If you do not provide all of these things, it will take us much longer to fix your problem. If we ask you to clarify these and you never respond, we will close your issue without fixing it.","title":"Contributing"},{"location":"contributing/#contribution-guidelines","text":"If you\u2019re reading this, you\u2019re probably interested in contributing to kiss-headers . Thank you very much! Open source projects live-and-die based on the support they receive from others, and the fact that you\u2019re even considering contributing to this project is very generous of you.","title":"Contribution Guidelines"},{"location":"contributing/#questions","text":"The GitHub issue tracker is for bug reports and feature requests . Questions are allowed only when no answer are provided in docs.","title":"Questions"},{"location":"contributing/#good-bug-reports","text":"Please be aware of the following things when filing bug reports: Avoid raising duplicate issues. Please use the GitHub issue search feature to check whether your bug report or feature request has been mentioned in the past. Duplicate bug reports and feature requests are a huge maintenance burden on the limited resources of the project. If it is clear from your report that you would have struggled to find the original, that's ok, but if searching for a selection of words in your issue title would have found the duplicate then the issue will likely be closed extremely abruptly. When filing bug reports about exceptions or tracebacks, please include the complete traceback. Partial tracebacks, or just the exception text, are not helpful. Issues that do not contain complete tracebacks may be closed without warning. Make sure you provide a suitable amount of information to work with. This means you should provide: Guidance on how to reproduce the issue . Ideally, this should be a small code sample that can be run immediately by the maintainers. Failing that, let us know what you're doing, how often it happens, what environment you're using, etc. Be thorough: it prevents us needing to ask further questions. Tell us what you expected to happen . When we run your example code, what are we expecting to happen? What does \"success\" look like for your code? Tell us what actually happens . It's not helpful for you to say \"it doesn't work\" or \"it fails\". Tell us how it fails: do you get an exception? A None answer? How was the actual result different from your expected result? Tell us what version of kiss-headers you're using , and how you installed it . Different versions of kiss-headers behave differently and have different bugs. If you do not provide all of these things, it will take us much longer to fix your problem. If we ask you to clarify these and you never respond, we will close your issue without fixing it.","title":"Good Bug Reports"},{"location":"imap/","text":"Using email Usage of kiss-headers is pretty much the same. You can do the following : from kiss_headers import parse_it raw_content = open ( 'my-email.eml' , 'rb' ) . read () headers = parse_it ( raw_content )","title":"Email"},{"location":"imap/#using-email","text":"Usage of kiss-headers is pretty much the same. You can do the following : from kiss_headers import parse_it raw_content = open ( 'my-email.eml' , 'rb' ) . read () headers = parse_it ( raw_content )","title":"Using email"},{"location":"quickstart/","text":"Using parse_it for the first time parse_it() method take bytes , str , fp , dict or even requests.Response itself and give you back a Headers object. from requests import get from kiss_headers import parse_it response = get ( 'https://www.google.fr' ) headers = parse_it ( response ) headers . content_type . charset # output: ISO-8859-1 OneToOne, OneToMany Do not forget that headers are not 1 TO 1. One header can be repeated multiple time and attribute can have multiple value within the same header. from kiss_headers import parse_it my_cookies = \"\"\"set-cookie: 1P_JAR=2020-03-16-21; expires=Wed, 15-Apr-2020 21:27:31 GMT; path=/; domain=.google.fr; Secure; SameSite=none set-cookie: CONSENT=WP.284b10; expires=Fri, 01-Jan-2038 00:00:00 GMT; path=/; domain=.google.fr\"\"\" headers = parse_it ( my_cookies ) type ( headers . set_cookie ) # output: list headers . set_cookie [ 0 ] . expires # output Wed, 15-Apr-2020 21:27:31 GMT Using protected keyword Just a note to inform you that accessing a header that have the same name as a reserved keyword must be done this way : from kiss_headers import parse_it headers = parse_it ( 'From: Ousret; origin=www.github.com \\n IS: 1 \\n While: Not-True' ) # this flavour headers . from_ # to access From, just add a single underscore to it # or.. headers [ 'from' ]","title":"Basic Usage"},{"location":"quickstart/#using-parse_it-for-the-first-time","text":"parse_it() method take bytes , str , fp , dict or even requests.Response itself and give you back a Headers object. from requests import get from kiss_headers import parse_it response = get ( 'https://www.google.fr' ) headers = parse_it ( response ) headers . content_type . charset # output: ISO-8859-1","title":"Using parse_it for the first time"},{"location":"quickstart/#onetoone-onetomany","text":"Do not forget that headers are not 1 TO 1. One header can be repeated multiple time and attribute can have multiple value within the same header. from kiss_headers import parse_it my_cookies = \"\"\"set-cookie: 1P_JAR=2020-03-16-21; expires=Wed, 15-Apr-2020 21:27:31 GMT; path=/; domain=.google.fr; Secure; SameSite=none set-cookie: CONSENT=WP.284b10; expires=Fri, 01-Jan-2038 00:00:00 GMT; path=/; domain=.google.fr\"\"\" headers = parse_it ( my_cookies ) type ( headers . set_cookie ) # output: list headers . set_cookie [ 0 ] . expires # output Wed, 15-Apr-2020 21:27:31 GMT","title":"OneToOne, OneToMany"},{"location":"quickstart/#using-protected-keyword","text":"Just a note to inform you that accessing a header that have the same name as a reserved keyword must be done this way : from kiss_headers import parse_it headers = parse_it ( 'From: Ousret; origin=www.github.com \\n IS: 1 \\n While: Not-True' ) # this flavour headers . from_ # to access From, just add a single underscore to it # or.. headers [ 'from' ]","title":"Using protected keyword"}]}